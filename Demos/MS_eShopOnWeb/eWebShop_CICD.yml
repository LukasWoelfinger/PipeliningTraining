resources:
  repositories:
    - repository: GitHubSource
      type: github
      # TODO: Update YOUR endpoint and project path
      endpoint: ${{ Parameters.GitHubEndPoint }}
      name: ${{ Parameters.GitHubProject }}

parameters:
  - name: subscriptionPrincipal
    displayName: Azure Resource Manager connection
    type: string
    default: "Training-eWebShop-Demo"

  - name: RestoreBuildProjects
    displayName: Project file to restore and build
    type: string
    default: "**/*.csproj"

  - name: TestProjects
    displayName: Project file containing test automations.
    type: string
    default: "**/[Tt]ests/**/*.csproj"

  - name: EnableTests
    displayName: Execute tests
    type: boolean
    default: true

  - name: deploymentPackage
    displayName: Location and filename of deployment zip
    type: string
    default: "$(System.ArtifactsDirectory)/**/Web.zip"

  - name: buildImage
    displayName: Build Pool Image
    type: string
    default: ubuntu-latest
    values:
      - windows-latest
      - ubuntu-latest
      - macOS-latest

  - name: deployImage
    displayName: Deplyoment Pool Image
    type: string
    default: ubuntu-latest
    values:
      - windows-latest
      - ubuntu-latest
      - macOS-latest

  - name: terraformFolder
    displayName: Terraform path on checkout
    type: string
    default: "$(System.DefaultWorkingDirectory)/PipeliningTraining/Demos/MS_eShopOnWeb/Terraform/"

  - name: terraformExecFolder
    displayName: Terraform execution path
    type: string
    default: "$(System.ArtifactsDirectory)/drop/Terraform/"

  - name: checkOutFromGitHub
    displayName: Use GitHub code? (Endpoint and project required)
    type: boolean
    default: false

  - name: GitHubEndPoint
    displayName: Name of the endpoint to compile source from GitHub
    type: string
    default: "LukasWoelfinger"

  - name: GitHubProject
    displayName: GitHub project repository to get the code from
    type: string
    default: "LukasWoelfinger/eShopOnWeb"

# variables to be defined for pipeline:
#   location:            e.g. 'westeurope'
#   tf_rgstorage:        e.g. 'rg-Storage'
#   tf_storageaccount:   e.g. 'terraformstatestorage'
#   tf_storagecontainer: e.g. 'terraform'
#   tf_applicationname:  e.g. 'lwpulterraformweb'
#   tf_environmentname:  e.g. 'Test' or 'Dev' #REMARK: prefix "tf_" required to prevent web.config manipulations from dotnet build CLI (parameter --environmentname exists here to setup ASPNETCORE_ENVIRONMENT)
#   tf_storagekey:       e.g. 'WillBeSetWhileRuntime' <-- DO NOT store the real key here! It will be determined by the pipeline itself at runtime.# BuildConfiguration: e.g. debug
#   configuration:       e.g. debug # Remark this will set the --configuration parameter of dotnet CLI (hidden feature)
#   subscriptionid:      GUID of subscription

trigger: none
#- main

stages:
  - stage: TerraformCI
    displayName: Stage to compile terraform infrastructure continously.
    jobs:
      - job:
        displayName: Compile and Test
        pool:
          vmImage: "${{ Parameters.buildImage }}"
        steps:
          # 0. Checkout sources
          - checkout: self # if you use the pipeline from remote self is the pipeline demo project
    ${{ if Parameters.checkOutFromGitHub }}:
      - checkout: GitHubSource

      - template: templates/eShop_CI_Template.yml
        parameters:
          TerraformFolder: "${{ Parameters.TerraformFolder }}"
          RestoreBuildProjects: "${{ Parameters.RestoreBuildProjects }}"
          TestProjects: "${{ Parameters.TestProjects }}"
          EnableTests: "${{ Parameters.EnableTests }}"

  - stage: TerraformCD
    displayName: Stage to deploy terraform infrastructure continously.
    dependsOn: TerraformCI
    jobs:
      - job:
        displayName: Validate and configure IaC and deploy
        pool:
          vmImage: "${{ Parameters.deployImage }}"
        steps:
          # Preparation: get build artifact from previous stage
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: "current"
              downloadType: "specific"
              downloadPath: "$(System.ArtifactsDirectory)"

          # 1. Ensure the storage backend for terraform exists (Az modules are used!)
          - task: AzureCLI@2
            displayName: "Setup Terraform backend storage"
            inputs:
              azureSubscription: "${{ parameters.subscriptionPrincipal }}"
              scriptType: "pscore"
              scriptLocation: "inlineScript"
              inlineScript: |
                # Create Azure resource group for Terraform state storage
                az group create --location $(location) --name $(tf_rgstorage)

                # Create storage account
                az storage account create --name $(tf_storageaccount) --resource-group $(tf_rgstorage) --location $(location) --sku Standard_LRS

                # Create storage container
                az storage container create --name $(tf_storagecontainer) --account-name $(tf_storageaccount)

                az storage account keys list -g $(tf_rgstorage) -n $(tf_storageaccount)
            env:
              AZURE_DEVOPS_CLI_PAT: $(System.AccessToken)

          # 2. Get the access key for terraform backend storage
          - task: AzurePowerShell@5
            displayName: "Azure PowerShell pwsh: Set storage access key"
            inputs:
              azureSubscription: "${{ parameters.subscriptionPrincipal }}"
              ScriptType: InlineScript
              Inline: |

                # Using this script we will fetch storage key which is required in terraform file to authenticate backend storage account

                $key=(Get-AzStorageAccountKey -ResourceGroupName $(tf_rgstorage) -AccountName $(tf_storageaccount)).Value[0]

                Write-Host "##vso[task.setvariable variable=tf_storagekey]$key"
              azurePowerShellVersion: LatestVersion

          # 3. Replace the tokens inside the Terraform script files
          - task: replacetokens@3
            displayName: "Replace tokens in ${{ parameters.terraformExecFolder }}/*.tf"
            inputs:
              targetFiles: "${{ parameters.terraformExecFolder }}/*.tf"
              actionOnMissing: "warn"
              keepToken: false
              tokenPrefix: "__"
              tokenSuffix: "__"

          # 4. Install Terraform on agent
          - task: TerraformInstaller@0
            displayName: "Terraform: install"
            inputs:
              terraformVersion: "1.0.8"

          # 5. Initialize Terraform on the agent
          - task: TerraformTaskV2@2
            displayName: "Terraform : init"
            inputs:
              provider: "azurerm"
              command: "init"
              workingDirectory: "${{ parameters.terraformExecFolder }}/"
              backendServiceArm: "${{ parameters.subscriptionPrincipal }}"
              backendAzureRmResourceGroupName: "$(tf_rgstorage)"
              backendAzureRmStorageAccountName: "$(tf_storageaccount)"
              backendAzureRmContainerName: "$(tf_storagecontainer)"
              backendAzureRmKey: "$(tf_applicationname)-$(tf_environmentname)-terraform.tfstate"

          # 6. Plan the infrastructure changes
          - task: TerraformTaskV2@2
            displayName: "Terraform: plan"
            inputs:
              provider: "azurerm"
              command: "plan"
              workingDirectory: "${{ parameters.terraformExecFolder }}"
              environmentServiceNameAzureRM: "${{ parameters.subscriptionPrincipal }}"

          # 7. Auto apply the infrastructure
          - task: TerraformTaskV2@2
            displayName: "Terraform: apply"
            inputs:
              provider: "azurerm"
              command: "apply"
              workingDirectory: "${{ parameters.terraformExecFolder }}"
              commandOptions: "--auto-approve"
              environmentServiceNameAzureRM: "${{ parameters.subscriptionPrincipal }}"

          # 8. Publish the web application to the infrastructure
          - task: AzureRmWebAppDeployment@4
            displayName: "Azure App Service Deploy: app-$(tf_applicationname)-$(tf_environmentname)"
            inputs:
              ConnectionType: "AzureRM"
              azureSubscription: "${{ parameters.subscriptionPrincipal }}"
              appType: "webAppLinux"
              WebAppName: "app-$(tf_applicationname)-$(tf_environmentname)"
              packageForLinux: "${{ Parameters.deploymentPackage }}"
